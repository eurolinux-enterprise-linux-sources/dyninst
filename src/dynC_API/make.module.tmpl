# 
# Common makefile template for the dyninstAPI library.  This file is not
# intended to be a useful Makefile in isolation; instead, it should be
# included from within an architecture-specific Makefile.
#
# $Id: make.module.tmpl,v 1.4 2008/09/15 17:38:17 jaw Exp $
#

SUITE_NAME	= DynC


DYNCNAME = dynC

CFLAGS		     += $(USEFULWARNINGS) -I$(TO_CORE)/dyninstAPI/h -I$(TO_CORE)/dynutil/h -I$(TO_CORE)/patchAPI/h -I$(TO_CORE)/parseAPI/h
CXXFLAGS	     += $(USEFULWARNINGS) -I$(TO_CORE)/dyninstAPI/h -I$(TO_CORE)/dynutil/h -I$(TO_CORE)/patchAPI/h -I$(TO_CORE)/parseAPI/h

LDFLAGS += -L$(TO_CORE)/dyninstAPI/$(PLATFORM) -L$(TO_CORE)/common/$(PLATFORM)
LDFLAGS += -L$(TO_CORE)/symtabAPI/$(PLATFORM) -L$(TO_CORE)/instructionAPI/$(PLATFORM) -L$(LIBRARY_DEST)
LDFLAGS += -lcommon -lsymtabAPI -ldyninstAPI
LDFLAGS += -L../../common/$(PLATFORM) -L../../symtabAPI/$(PLATFORM) -L../../dyninstAPI/$(PLATFORM)

LDFLAGS     += $(LIBDIR)
ifndef USES_NATIVE_CC
LD		= $(GXX)
LDFLAGS		+= -shared $(G_PTHREAD_LD)
CXXFLAGS	+= $(G_PTHREAD)
else
ifeq (solaris,$(findstring solaris,$(PLATFORM)))
LDFLAGS		+= -G
endif #sparc
endif #USES_NATIVE

ifneq ($(findstring cap_instruction_api,$(CAP_DEF)),)
    LDFLAGS += -linstructionAPI -L../../instructionAPI/$(PLATFORM)
endif

TO_INC   = ../h

PUBLIC_H = \
    dynC.h\
    snippetGen.h

SRCS += ../src/dynC.C ../src/snippetGen.C ../src/lex.$(DYNCNAME).C ../src/$(DYNCNAME).tab.C


ifndef USES_NATIVE_CC
ifdef CROSSCOMPILER
SYSLIBS		+= -liberty -lg++ -lstdc++ -lm
else
SYSLIBS         += -liberty
endif
else
SYSLIBS		+= -ldemangle
endif

LEXFLAGS +=  -P$(DYNCNAME)
YACCFLAGS += -d -b $(DYNCNAME) -p $(DYNCNAME)

#verbose grammar:
ifeq (0,0)
YACCFLAGS += -v
endif

IFLAGS      += -I../$(PLATFORM) -I../src -I../h -I../../dynutil/h 
IFLAGS      += -I../../symtabAPI/h -I../../instructionAPI/h
IFLAGS      += -I../../proccontrol/h
IFLAGS      += -I../../parseAPI/h -I../../dataflowAPI/h
IFLAGS      += -I../../patchAPI/h
# We include ast.h for debugging purposes; if this is ever a problem it can be removed
IFLAGS      += -I../../dyninstAPI/src


# We use a separate target for regenerating Lex and Yacc source files because of 
# inconsistent Lex and Yacc availability across platforms.

# regenerate LEX and YACC files, use "make regenerate". Then run make from Dyninst Root.
regenerate:
	$(LEX) $(LEXFLAGS) ../src/C.l
	mv lex.$(DYNCNAME).c ../src/lex.$(DYNCNAME).C
	$(YACC) $(YACCFLAGS) ../src/C.y
	mv $(DYNCNAME).tab.c ../src/$(DYNCNAME).tab.C
	mv $(DYNCNAME).tab.h ../h/

# regenerate LEX and YACC files with debug flags. 
regen_debug:
	$(LEX) -d $(LEXFLAGS) ../src/C.l
	mv lex.$(DYNCNAME).c ../src/lex.$(DYNCNAME).C
	$(YACC) $(YACCFLAGS) -t ../src/C.y
	mv $(DYNCNAME).tab.c ../src/$(DYNCNAME).tab.C
	mv $(DYNCNAME).tab.h ../h/



